services:
  rabbitmq:
    image: masstransit/rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"

  # Areas API
  areas-migrations:
    build:
      context: ./areas-api/
      dockerfile: dockerfile-migrations
    image: areas-migrations-image
    restart: "no"
    depends_on:
      areas-mysql:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__ConnectionString=Server=areas-mysql;Database=tc1_contatos_regionais;User=root;Password=123456;Port=3306;
    networks:
      - app-network

  areas-mysql:
    image: mysql:8.0
    ports:
      - "3308:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      - MYSQL_DATABASE=tc1_contatos_regionais
    volumes:
      - areas_mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  areas-api:
    build:
      context: ./areas-api/
    image: areas-api-image
    ports:
      - "8081:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__ConnectionString=Server=areas-mysql;Database=tc1_contatos_regionais;User=root;Password=123456;Port=3306;
      - RABBITMQ_HOST=host.docker.internal
    depends_on:
      areas-mysql:
        condition: service_healthy
    restart: always
    networks:
      - app-network

  # Auth API
  auth-migrations:
    build:
      context: ./auth-api/
      dockerfile: dockerfile-migrations
    image: auth-migrations-image
    restart: "no"
    depends_on:
      auth-mysql:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__ConnectionString=Server=auth-mysql;Database=tc1_contatos_regionais;User=root;Password=123456;Port=3306;
    networks:
      - app-network

  auth-mysql:
    image: mysql:8.0
    ports:
      - "3309:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      - MYSQL_DATABASE=tc1_contatos_regionais
    volumes:
      - auth_mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  auth-api:
    build:
      context: ./auth-api/
    image: auth-api-image
    ports:
      - "8082:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__ConnectionString=Server=auth-mysql;Database=tc1_contatos_regionais;User=root;Password=123456;Port=3306;
      - RABBITMQ_HOST=host.docker.internal
    depends_on:
      auth-mysql:
        condition: service_healthy
    restart: always
    networks:
      - app-network

  # Contatos API
  contatos-migrations:
    build:
      context: ./contatos-api/
      dockerfile: dockerfile-migrations
    image: contatos-migrations-image
    restart: "no"
    depends_on:
      contatos-mysql:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__ConnectionString=Server=contatos-mysql;Database=tc1_contatos_regionais;User=root;Password=123456;Port=3306;
    networks:
      - app-network

  contatos-mysql:
    image: mysql:8.0
    ports:
      - "3310:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      - MYSQL_DATABASE=tc1_contatos_regionais
    volumes:
      - contatos_mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  contatos-api:
    build:
      context: ./contatos-api/
    image: contatos-api-image
    ports:
      - "8083:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__ConnectionString=Server=contatos-mysql;Database=tc1_contatos_regionais;User=root;Password=123456;Port=3306;
      - RABBITMQ_HOST=host.docker.internal
    depends_on:
      contatos-mysql:
        condition: service_healthy
    restart: always
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - areas-api
      - auth-api
      - contatos-api
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-S", "http://prometheus:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network

volumes:
  grafana_data:
  areas_mysql_data:
  auth_mysql_data:
  contatos_mysql_data:

networks:
  app-network: