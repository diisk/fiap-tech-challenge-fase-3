services:
  rabbitmq:
    image: masstransit/rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"

  areas-migrations:
    build:
      context: ./areas-api/
      dockerfile: dockerfile-migrations
    image: areas-migrations-image
    restart: "no"
    depends_on:
      areas-mysql:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__ConnectionString=Server=areas-mysql;Database=tc1_contatos_regionais;User=root;Password=123456;Port=3306;
    networks:
      - app-network

  areas-mysql:
    image: mysql:8.0
    ports:
      - "3308:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      - MYSQL_DATABASE=tc1_contatos_regionais
    volumes:
      - areas_mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  areas-api:
    build:
      context: ./areas-api/
    image: areas-api-image
    ports:
      - "8081:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__ConnectionString=Server=areas-mysql;Database=tc1_contatos_regionais;User=root;Password=123456;Port=3306;
      - RABBITMQ_HOST=host.docker.internal
    depends_on:
      areas-mysql:
        condition: service_healthy
    restart: always
    networks:
      - app-network

  auth-migrations:
    build:
      context: ./auth-api/
      dockerfile: dockerfile-migrations
    image: auth-migrations-image
    restart: "no"
    depends_on:
      auth-mysql:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__ConnectionString=Server=auth-mysql;Database=tc1_contatos_regionais;User=root;Password=123456;Port=3306;
    networks:
      - app-network

  auth-mysql:
    image: mysql:8.0
    ports:
      - "3309:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      - MYSQL_DATABASE=tc1_contatos_regionais
    volumes:
      - auth_mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  auth-api:
    build:
      context: ./auth-api/
    image: auth-api-image
    ports:
      - "8082:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__ConnectionString=Server=auth-mysql;Database=tc1_contatos_regionais;User=root;Password=123456;Port=3306;
      - RABBITMQ_HOST=host.docker.internal
    depends_on:
      auth-mysql:
        condition: service_healthy
    restart: always
    networks:
      - app-network

  contatos-migrations:
    build:
      context: ./contatos-api/
      dockerfile: dockerfile-migrations
    image: contatos-migrations-image
    restart: "no"
    depends_on:
      contatos-mysql:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__ConnectionString=Server=contatos-mysql;Database=tc1_contatos_regionais;User=root;Password=123456;Port=3306;
    networks:
      - app-network

  contatos-mysql:
    image: mysql:8.0
    ports:
      - "3310:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      - MYSQL_DATABASE=tc1_contatos_regionais
    volumes:
      - contatos_mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  contatos-api:
    build:
      context: ./contatos-api/
    image: contatos-api-image
    ports:
      - "8083:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__ConnectionString=Server=contatos-mysql;Database=tc1_contatos_regionais;User=root;Password=123456;Port=3306;
      - RABBITMQ_HOST=host.docker.internal
    depends_on:
      contatos-mysql:
        condition: service_healthy
    restart: always
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - areas-api
      - auth-api
      - contatos-api
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-S", "http://prometheus:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network
  kong-database:
    image: postgres:13
    container_name: kong-database
    restart: always
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong -d kong"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  kong-migrations:
    image: kong:latest
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - app-network

  kong:
    image: kong:latest
    container_name: kong
    restart: always
    depends_on:
      - kong-database
      - kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    networks:
      - app-network

  kong-setup:
    image: curlimages/curl:latest
    container_name: kong-setup
    depends_on:
      - kong
    volumes:
      - ./kong-setup.sh:/kong-setup.sh
    entrypoint: ["/bin/sh", "-c", "/kong-setup.sh"]
    networks:
      - app-network

  # konga:
  #   image: pantsel/konga
  #   container_name: konga
  #   restart: always
  #   depends_on:
  #     - kong
  #   environment:
  #     DB_ADAPTER: postgres
  #     DB_HOST: kong-database
  #     DB_USER: kong
  #     DB_PASSWORD: kong
  #     DB_DATABASE: kong
  #   ports:
  #     - "1337:1337"
  #   networks:
  #     - app-network
  
  
  consulta-contatos-function:
    build:
      context: ./ConsultaContatosFunction
      dockerfile: Dockerfile
    image: consulta-contatos-function-image
    ports:
      - "7072:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      - rabbitmq
      - rabbitmq-setup
    restart: always
    networks:
      - app-network


  rabbitmq-setup:
    image: curlimages/curl:latest
    container_name: rabbitmq-setup
    depends_on:
      - rabbitmq
    entrypoint: >
      sh -c "
      echo 'Aguardando RabbitMQ subir...' &&
      sleep 10 &&
      echo 'Criando fila consulta-contato-dlq...' &&
      curl -u guest:guest -X PUT -H 'content-type: application/json' \
      -d '{\"durable\":true}' \
      http://rabbitmq:15672/api/queues/%2f/consulta-contato-dlq"
    networks:
      - app-network

volumes:
  grafana_data:
  areas_mysql_data:
  auth_mysql_data:
  contatos_mysql_data:

networks:
  app-network: